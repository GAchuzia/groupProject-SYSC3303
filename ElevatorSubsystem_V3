import java.io.IOException;
import java.net.*;
import java.util.ArrayList;

/**
 * Represents the subsystem containing the elevators.
 *
 * @author Matteo Golin, 101220709
 * @author Grant Achuzia, 101222695
 * @author Saja Fawagreh, 101217326
 * @author Javeria Sohail, 101197163
 * @author Yousef Hammad, 101217858
 * @version 0.0.0
 */
public class ElevatorSubsystem_V3 {

    /** Port for sending and receiving messages. */
    public static final int PORT = 2003;

    /** Length of buffer in bytes for receiving UDP messages. */
    public static final int BUFFER_LEN = 100;

    /** Number of ElevatorSubsystems in the simulation. */
    public static final int NUM_ELEVATORS = 1;

    public static DatagramPacket receivePacket;

    static DatagramSocket sendReceiveSocket;


    /** Runs the primary logic of the ElevatorSubsystem. */
    public static void main(String[] args) throws IOException, SocketException {

        // Create socket for receiving requests
        DatagramSocket channel = new DatagramSocket(PORT);

        // Create outgoing message queue for elevators TODO: make this UDP
        // MessageQueue<ElevatorRequest> outgoing = new MessageQueue<>();
        try {
            // Construct a datagram socket to receive messages from elevator
            sendReceiveSocket = new DatagramSocket(2003);
        } catch (SocketException se) {   // Can't create the socket.
            se.printStackTrace();
            System.exit(1);
        }


        // Initialize all elevators
        Thread[] elevators = new Thread[NUM_ELEVATORS];
        ArrayList<MessageQueue<ElevatorRequest>> elevators_in = new ArrayList<>();
        for (int i = 0; i < NUM_ELEVATORS; i++) {
            elevators_in.add(new MessageQueue<>());
            elevators[i] = new Thread(new Elevator_V3(i));
        }

        // Start all elevators
        for (int i = 0; i < elevators.length; i++) {
            elevators[i].start();
        }

        // Process requests from scheduler
        DatagramPacket message = null;
        while (true) {

            message = new DatagramPacket(new byte[BUFFER_LEN], BUFFER_LEN);
            channel.receive(message);
            ElevatorRequest request = new ElevatorRequest(message.getData());

            // Handle request (forward it to the only elevator that currently exists)
            // WARNING: assumes a single elevator
            elevators_in.get(0).putMessage(request);

            // TODO: Read back messages from the elevators

            byte clientData[] = new byte[100];
            receivePacket = new DatagramPacket(clientData, clientData.length);

            //receive the packet from the scheduler
            try {
                sendReceiveSocket.receive(receivePacket);
            } catch (IOException e) {
                System.out.print("IO Exception: likely:");
                System.out.println("Receive Socket Timed Out.\n" + e);
                e.printStackTrace();
                System.exit(1);
            }

            System.out.print("Received message from elevator...");


        }
    }
}
