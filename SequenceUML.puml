@startuml
'autonumber

participant Main

activate Main
create "ElevatorIncoming: MessageQueue" as ElevatorIncoming
Main --> ElevatorIncoming: <<create>>
create "ElevatorOutgoing: MessageQueue" as ElevatorOutgoing
Main --> ElevatorOutgoing: <<create>>
create "FloorIncoming: MessageQueue" as FloorIncoming
Main --> FloorIncoming: <<create>>
create "FloorOutgoing: MessageQueue" as FloorOutgoing
Main --> FloorOutgoing: <<create>>

create FloorSubsystem
Main --> FloorSubsystem: <<create>>(FloorIncoming, FloorOutgoing)
create ElevatorSubsystem
Main --> ElevatorSubsystem: <<create>>(ElevatorIncoming, ElevatorOutgoing)
create Scheduler
Main --> Scheduler: <<create>>(FloorIncoming, FloorOutgoing, ElevatorIncoming, ElevatorOutgoing)

activate FloorSubsystem
Main -> FloorSubsystem: start()
deactivate FloorSubsystem
activate ElevatorSubsystem
Main -> ElevatorSubsystem: start()
deactivate ElevatorSubsystem
activate Scheduler
Main -> Scheduler: start()
deactivate Scheduler

deactivate Main

loop filestream != EOF

    ' FloorSubsystem produces a request
    activate FloorSubsystem
    FloorSubsystem -> FloorOutgoing: putMessage(request)
    deactivate FloorSubsystem

    ' Scheduler gets request
    activate Scheduler
    activate FloorOutgoing
    Scheduler -> FloorOutgoing: getMessage()
    FloorOutgoing --> Scheduler: request
    deactivate FloorOutgoing

    ' Scheduler forwards request to elevator subsystem
    activate ElevatorIncoming
    Scheduler -> ElevatorIncoming: putMessage(request)
    deactivate Scheduler

    ' Elevator subsystem echoes request back to its outgoing
    activate ElevatorSubsystem
    ElevatorSubsystem -> ElevatorIncoming: getMessage()
    ElevatorIncoming --> ElevatorSubsystem: request
    deactivate ElevatorIncoming
    activate ElevatorOutgoing
    ElevatorSubsystem -> ElevatorOutgoing: putMessage(request)
    deactivate ElevatorSubsystem

    ' Scheduler forwards elevator outgoing back to floor
    activate Scheduler
    Scheduler -> ElevatorOutgoing: getMessage()
    ElevatorOutgoing --> Scheduler: request
    deactivate ElevatorOutgoing
    activate FloorIncoming
    Scheduler -> FloorIncoming: putMessage(request)
    deactivate Scheduler

    ' Floor reads message
    activate FloorSubsystem
    FloorSubsystem -> FloorIncoming: getMessage()
    FloorIncoming --> FloorSubsystem: request
end

    ' FloorSubsystem signals kill message
    deactivate FloorIncoming
    FloorSubsystem -> FloorOutgoing: putMessage(null)
    deactivate FloorSubsystem
    activate FloorOutgoing

    ' Scheduler forwards kill message to elevator
    activate Scheduler
    Scheduler -> FloorOutgoing: getMessage()
    FloorOutgoing --> Scheduler: null
    deactivate FloorOutgoing
    activate ElevatorIncoming
    Scheduler -> ElevatorIncoming: putMessage(null)
    deactivate Scheduler

    ' Elevator kills itself
    activate ElevatorSubsystem
    ElevatorSubsystem -> ElevatorIncoming: getMessage()
    ElevatorIncoming --> ElevatorSubsystem: null
    deactivate ElevatorIncoming
    activate ElevatorOutgoing
    ElevatorSubsystem -> ElevatorOutgoing: putMessage(null)
    ElevatorSubsystem --> ElevatorSubsystem: <<destroy>>
    deactivate ElevatorSubsystem
    destroy ElevatorSubsystem

    ' Scheduler receives self-destruct
    activate Scheduler
    Scheduler -> ElevatorOutgoing: getMessage()
    ElevatorOutgoing --> Scheduler: null
    deactivate ElevatorOutgoing
    activate FloorIncoming
    Scheduler -> FloorIncoming: putMessage(null)
    Scheduler --> Scheduler: <<destroy>>
    deactivate Scheduler
    destroy Scheduler

    ' Floor receives self-destruct
    activate FloorSubsystem
    FloorSubsystem -> FloorIncoming: getMessage()
    FloorIncoming --> FloorSubsystem: null
    deactivate FloorIncoming
    FloorSubsystem --> FloorSubsystem: <<destroy>>
    deactivate FloorSubsystem
    destroy FloorSubsystem

@enduml
