@startuml
'autonumber

participant Main

activate Main
create "ElevatorIncoming: MessageQueue" as ElevatorIncoming
Main --> ElevatorIncoming: <<create>>
create "ElevatorOutgoing: MessageQueue" as ElevatorOutgoing
Main --> ElevatorOutgoing: <<create>>
create "FloorIncoming: MessageQueue" as FloorIncoming
Main --> FloorIncoming: <<create>>
create "FloorOutgoing: MessageQueue" as FloorOutgoing
Main --> FloorOutgoing: <<create>>

create FloorSubsystem
Main --> FloorSubsystem: <<create>>(FloorIncoming, FloorOutgoing)
create ElevatorSubsystem
Main --> ElevatorSubsystem: <<create>>(ElevatorIncoming, ElevatorOutgoing)
create Scheduler
Main --> Scheduler: <<create>>(FloorIncoming, FloorOutgoing, ElevatorIncoming, ElevatorOutgoing)

Main -> FloorSubsystem: start()
Main -> ElevatorSubsystem: start()
Main -> Scheduler: start()

deactivate Main

FloorIncoming -> MessageQueue: putMessage(request)
loop until FloorSubsystem exits
    FloorSubsystem -> FloorIncoming: getMessage()
    alt "Request from Elevator"
        FloorIncoming -> ElevatorOutgoing: putMessage(request)
        loop until ElevatorSubsystem exits
            ElevatorSubsystem -> ElevatorIncoming: getMessage()
            ElevatorIncoming -> Scheduler: putMessage(request)
            loop until Scheduler exits
                Scheduler -> ElevatorOutgoing: getMessage()
                ElevatorOutgoing -> FloorIncoming: putMessage(echoedRequest)
            end
        end
    else "Request from Floor"
        FloorIncoming -> Scheduler: putMessage(request)
        loop until Scheduler exits
            Scheduler -> FloorOutgoing: getMessage()
            FloorOutgoing -> ElevatorIncoming: putMessage(request)
            loop until ElevatorSubsystem exits
                ElevatorSubsystem -> ElevatorOutgoing: getMessage()
                ElevatorOutgoing -> FloorIncoming: putMessage(echoedRequest)
            end
        end
    end
end

FloorIncoming -> Scheduler: putMessage(null)

@enduml
